- hosts: localhost
  connection: local
  gather_facts: no
  become: no
  vars:
    homebrew_cask_opts: "--appdir=/Applications --caskroom=/usr/local/Caskroom"

    ruby_version: 2.3.1
    nodejs_version: v6.3.1
    python2_version: 2.7.12
    python3_version: 3.5.2
    go_version: 1.6.2
    erlang_version: 19.0
    elixir_version: 1.3.2
    php_version: 7.0.8
    home_dir: "{{ lookup('env','HOME') }}/"

    lint_links:
      - .eslintrc
      - .scss-lint.yml
    app_setting_links:
      # アプリ初回起動時までパスが存在しなくて落ちる
      # - { src: private.xml, dest: Library/Application\ Support/Karabiner/private.xml }
      - { src: gemrc,       dest: .gemrc }
    brew_taps:
      - caskroom/cask
      - caskroom/versions
      - caskroom/fonts
      - homebrew/dupes
      - homebrew/science
      # for Ergodox profile
      - osx-cross/avr
    brew_cask_priority_high:
      - { name: java }
      - { name: xquartz }
    brew_priority_high:
      - { name: ansible }
      - { name: curl }
      - { name: direnv }
      - { name: gnu-sed }
      - { name: qt5 }
      - { name: wget }
      - { name: openssl }
      - { name: openssl, state: linked, install_options: force }
      - { name: icdiff }
      - { name: terminal-notifier }
      - { name: tree }
      - { name: tmux }
      - { name: reattach-to-user-namespace }
      - { name: git }
      - { name: git-flow }
      - { name: hub }
      - { name: tig }
      - { name: readline }
      - { name: nginx }
      - { name: htop-osx }
      - { name: rsync }
      - { name: zsh-completions }
      - { name: ag }
      - { name: ctags }
      - { name: figlet }
      - { name: jq }
      - { name: gdb }
      - { name: rmtrash }
      - { name: gnu-tar, install_options: default-names }
      - { name: mcrypt }
      - { name: re2c }
      - { name: jpeg }
      - { name: libxml2 }
      - { name: libxml2, state: linked, install_options: force }
      - { name: libxslt }
      - { name: libiconv }
      - { name: vim }
      - { name: autoconf }
      - { name: automake }
      # for Ergodox profile
      - { name: teensy_loader_cli }
      - { name: avr-libc }
    brew_priority_normal:
      - { name: ffmpeg }

    brew_cask_priority_normal:
      # browser, mailer, and apps for web services
      # - { name: google-chrome }
      # - { name: google-chrome-canary }
      # - { name: firefox-ja }
      # - { name: firefoxdeveloperedition-ja }
      # - { name: vivaldi }
      # - { name: blisk }
      # - { name: airmail-beta }
      # - { name: thunderbird-ja }
      - { name: skype }
      - { name: bathyscaphe }

      # development
      - { name: atom }
      # - { name: cyberduck }
      - { name: docker }
      - { name: eclipse-ide }
      - { name: flash }
      # - { name: github-desktop }
      - { name: imageoptim }
      - { name: iterm2-beta }
      # - { name: macdown }
      - { name: macvim-kaoriya }
      - { name: mi }
      - { name: pgadmin3 }
      # - { name: slack }
      - { name: rdm }
      - { name: robomongo }
      - { name: rstudio }
      - { name: sourcetree }
      # - { name: vagrant }
      # - { name: virtualbox }
      - { name: visual-studio-code }
      - { name: wireshark }

      # utility
      - { name: alfred }
      - { name: anki }
      - { name: appcleaner }
      - { name: bettertouchtool }
      - { name: caffeine }
      #- { name: clipmenu }
      - { name: cooviewer }
      #- { name: duet }
      - { name: day-o }
      - { name: diskmaker-x }
      - { name: diskwave }
      - { name: dupscanub }
      - { name: dropbox }
      - { name: flux }
      - { name: google-japanese-ime }
      - { name: hosts }
      - { name: karabiner }
      - { name: kindle }
      - { name: path-finder }
      - { name: seil }
      - { name: libreoffice }
      - { name: nvalt }
      - { name: onyx }
      # - { name: powerkey }
      # - { name: shupapan }
      # - { name: smoothmouse }
      # - { name: tinkertool }
      # - { name: truecrypt }
      - { name: vlc }
      - { name: teamviewer }
      - { name: xtrafinder }

      # for home machine
      - { name: lastfm }
      - { name: xld }
      # - { name: soundflower }
      - { name: pd-extended }

      # shareware
      - { name: parallels-desktop }
      # - { name: rubymine }
      # - { name: webstorm }
      # - { name: intellij-idea }

      # QuickLook
      - { name: betterzipql }
      - { name: emin-webpquicklook }
      - { name: epubquicklook }
      # replace this.
      # https://github.com/BrianGilbert/QLColorCode-extra
      #- { name: qlcolorcode }
      #- { name: qldds }    # sha256 error
      - { name: qlimagesize }
      - { name: qlmarkdown }
      - { name: qlnetcdf }
      - { name: qlprettypatch }
      - { name: qlrest }
      - { name: qlstephen }
      - { name: qlvideo }
      - { name: quicklook-csv }
      - { name: quicklook-json }
      - { name: quicknfo }
      - { name: scriptql }
      # - { name: suspicious-package }
      - { name: webpquicklook }
    anyenv_plugins:
      - { name: znz/anyenv-update.git, path: anyenv-update }
      - { name: aereal/anyenv-exec.git, path: anyenv-exec }
    anyenv_modules:
      - rb
      - nd
      - py
      - go
      - erl
      - ex
      - php
    rbenv_plugins:
      - { name: sstephenson/rbenv-default-gems.git, path: rbenv-default-gems }
      - { name: sstephenson/rbenv-gem-rehash.git, path: rbenv-gem-rehash }
      - { name: rkh/rbenv-update.git, path: rbenv-update }
  tasks:
    # Mac setting
    - name: preview text copy
      osx_defaults: domain=com.apple.finder key=QLEnableTextSelection type=bool value=true
      notify: Restart Finder

    - name: DS_Store file don't write on Network stores
      osx_defaults: domain=com.apple.desktopservices key=DSDontWriteNetworkStores type=bool value=true
      notify: Restart Finder

    # homebrew -------------------------------------------------
    - name: tap repositries
      homebrew_tap: tap={{ item }} state=present
      with_items: '{{brew_taps}}'

    - name: update & upgrade homebrew
      homebrew: update_homebrew=yes upgrade_all=yes

    - name: install homebrew-cask
      homebrew: name=brew-cask state=latest

    - name: install brew cask priority-high packages
      homebrew_cask: name={{ item.name }} state={{ item.state|default('present') }}
      with_items: '{{brew_cask_priority_high}}'
      environment:
        HOMEBREW_CASK_OPTS: '{{homebrew_cask_opts}}'

    - name: install brew priority-high packages
      homebrew: name={{ item.name }} state={{ item.state|default('latest') }} install_options={{ item.install_options|default() }}
      with_items: '{{brew_priority_high}}'

    - name: install brew priority-normal packages
      homebrew: name={{ item.name }} state={{ item.state|default('latest') }} install_options={{ item.install_options|default() }}
      with_items: '{{brew_priority_normal}}'

    - name: install brew cask priority-normal packages
      homebrew_cask: name={{ item.name }} state={{ item.state|default('present') }}
      with_items: '{{brew_cask_priority_normal}}'
      environment:
        HOMEBREW_CASK_OPTS: '{{homebrew_cask_opts}}'

    # sym links -------------------------------------------------
    - name: install links
      shell: "{{ home_dir }}/dotfiles/_setup.bash"

    # - name: install /usr/include links
    #   shell: ln -sf $(xcrun --show-sdk-path)/usr/include/ /usr/include
    #   become: yes

    # applications setting link
    - name: install app setting links
      file: src={{ home_dir }}dotfiles/{{ item.src }} dest={{ home_dir }}{{ item.dest }} state=link force=yes
      with_items: '{{app_setting_links}}'

    # anyenv
    - name: install anyenv
      git: repo=https://github.com/riywo/anyenv dest={{ home_dir }}.anyenv/

    - name: install anyenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/plugins/{{ item.path }}
      with_items: '{{anyenv_plugins}}'

    - name: install anyenv modules
      shell: /bin/bash -lc "anyenv install -s {{ item }}env"
      with_items: '{{anyenv_modules}}'

    # Ruby
    - name: install rbenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/rbenv/plugins/{{ item.path }}
      with_items: '{{rbenv_plugins}}'

    - name: mod default gem list
      file: src={{ home_dir }}dotfiles/default_libraries/default-gems dest={{ home_dir }}.anyenv/envs/rbenv/default-gems state=link force=yes

    - name: check ruby is installed or not
      shell: |
        /bin/bash -lc "rbenv versions" |
        grep {{ ruby_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: rbenv_version

    - name: install ruby with rbenv
      shell: /bin/bash -lc "rbenv install {{ ruby_version }}"
      when: rbenv_version.stdout != "{{ ruby_version }}"

    - name: set ruby version global
      shell: /bin/bash -lc "rbenv global {{ ruby_version }}"

    - name: rbenv rehash
      shell: /bin/bash -lc "rbenv rehash"

    - name: install bitclust
      shell: /bin/bash -lc "rbenv rehash && bitclust setup"

    # Node.js
    - name: check node.js {{ nodejs_version }} is installed or not
      shell: |
        /bin/bash -lc "ndenv versions" |
        grep {{ nodejs_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: ndenv_version

    - name: install ndenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/pyenv/plugins/{{ item.path }}
      with_items:
        - { name: 'kaave/ndenv-default-npms.git', path: 'ndenv-default-npms' }

    - name: mod default npm list
      file: src={{ home_dir }}dotfiles/default_libraries/default-npms dest={{ home_dir }}.anyenv/envs/ndenv/default-npms state=link force=yes

    - name: install node.js with ndenv
      shell: /bin/bash -lc "ndenv install {{ nodejs_version }}"
      when: ndenv_version.stdout != "{{ nodejs_version }}"

    - name: set node version global
      shell: /bin/bash -lc "ndenv global {{ nodejs_version }}"

    - name: ndenv rehash
      shell: /bin/bash -lc "ndenv rehash"

    - name: install jsctags plugins
      shell: /bin/bash -lc "npm i -g git://github.com/ramitos/jsctags.git"

    - name: ndenv rehash
      shell: /bin/bash -lc "ndenv rehash"

    # Python
    - name: install pyenv
      git: repo=https://github.com/yyuu/pyenv.git dest={{ home_dir }}.pyenv

    - name: install pyenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/pyenv/plugins/{{ item.path }}
      with_items:
        - { name: 'yyuu/pyenv-virtualenv.git', path: 'pyenv-virtualenv' }

    # 2.7.x install
    - name: check python {{ python2_version }} is installed or not
      shell: |
        /bin/bash -lc "pyenv versions" |
        grep {{ python2_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: pyenv_version

    - name: install python {{ python2_version }} with pyenv
      shell: /bin/bash -lc "pyenv install {{ python2_version }}"
      when: pyenv_version.stdout != "{{ python2_version }}"

    # 3.x.x install
    - name: check python {{ python3_version }} is installed or not
      shell: |
        /bin/bash -lc "pyenv versions" |
        grep {{ python3_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: pyenv_version

    - name: install python with pyenv
      shell: /bin/bash -lc "pyenv install {{ python3_version }}"
      when: pyenv_version.stdout != "{{ python3_version }}"

    # global use python2_version
    - name: set python version global
      shell: /bin/bash -lc "pyenv global {{ python2_version }}"

    - name: pyenv rehash
      shell: /bin/bash -lc "pyenv rehash"

    # go
    - name: check whether a specific version of golang is installed or not
      shell: |
        /bin/bash -lc "goenv versions" |
        grep {{ go_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: goenv_version

    - name: install golang with goenv
      shell: /bin/bash -lc "goenv install {{ go_version }}"
      when: goenv_version.stdout != "{{ go_version }}"

    - name: set golang version global
      shell: /bin/bash -lc "goenv global {{ go_version }}"

    - name: goenv rehash
      shell: /bin/bash -lc "goenv rehash"

    # Erlang
    - stat: path={{ home_dir }}.anyenv/envs/erlenv/releases/{{ erlang_version }}
      register: is_dir

    - name: download Erlang source
      get_url: url=http://www.erlang.org/download/otp_src_{{ erlang_version }}.tar.gz dest=/tmp/{{ erlang_version }}.tar.gz
      when: is_dir.stat.md5 is not defined

    - name: extract Erlang source
      # unarchiveでやると文字コードの都合かエラーになるのでshell
      shell: cd /tmp/ && tar xfvz {{ erlang_version }}.tar.gz && rm -rf {{ erlang_version }}.tar.gz
      when: is_dir.stat.md5 is not defined

    - name: install Erlang
      shell: cd /tmp/otp_src_{{ erlang_version }} && export ERL_TOP=`pwd` && ./configure --prefix={{ home_dir }}.anyenv/envs/erlenv/releases/{{ erlang_version }} && make && make install
      when: is_dir.stat.md5 is not defined

    - name: set Erlang version global
      shell: /bin/bash -lc "erlenv global {{ erlang_version }}"

    # Elixir
    - name: install Elixir with Homebrew
      homebrew: name=elixir state='latest'

    - name: check whether a specific version of Elixir is installed or not
      shell: |
        /bin/bash -lc "exenv versions" |
        grep {{ elixir_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: exenv_version

    - name: install Elixir with exenv
      shell: /bin/bash -lc "exenv install {{ elixir_version }}"
      when: exenv_version.stdout != "{{ elixir_version }}"

    - name: set Elixir version global
      shell: /bin/bash -lc "exenv global {{ elixir_version }}"

    # PHP
    - name: check whether a specific version of PHP is installed or not
      shell: |
        /bin/bash -lc "phpenv versions" |
        grep {{ php_version }} |
        tr '*' ' ' |
        gsed -e 's/\s\+//' |
        cut -f1 -d' '
      register: phpenv_version

    - name: install PHP with phpenv
      shell: /bin/bash -lc "phpenv install {{ php_version }}"
      when: phpenv_version.stdout != "{{ php_version }}"

    - name: set php version global
      shell: /bin/bash -lc "phpenv global {{ php_version }}"

    - name: rehash PHP
      shell: /bin/bash -lc "phpenv rehash"

    # nginx
    - name: set nginx plist
      shell: cp /usr/local/opt/nginx/*.plist /Library/LaunchDaemons
      become: yes

    - name: set nginx plist
      shell: launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist
      become: yes
