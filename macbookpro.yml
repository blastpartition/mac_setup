- hosts: localhost
  connection: local
  gather_facts: no
  become: no
  vars:
    homebrew_cask_opts: "--appdir=/Applications --caskroom=/usr/local/Caskroom"

    ruby_version: 2.3.3
    nodejs_version: v6.9.4
    # python2_version: 2.7.12
    # python3_version: 3.5.2
    go_version: 1.7.4
    erlang_version: 19.2
    elixir_version: 1.4.0
    php_version: 7.0.13
    home_dir: "{{ lookup('env','HOME') }}/"

    app_setting_links:
      # アプリ初回起動時までパスが存在しなくて落ちる
      # - { src: private.xml, dest: Library/Application\ Support/Karabiner/private.xml }
    brew_taps:
      - caskroom/cask
      - caskroom/versions
      - caskroom/fonts
      - codekitchen/dinghy
      - neovim/neovim
      - homebrew/dupes
      - homebrew/science
    brew_cask_priority_high:
      - { name: java }
      - { name: xquartz }
    brew_priority_high:
      - { name: python }
      - { name: python3 }
      - { name: ansible }
      - { name: haskell-stack }
      - { name: curl }
      - { name: direnv }
      - { name: fswatch }
      - { name: gnu-sed }
      # - { name: qt5 } # can't install 10.12
      - { name: wget }
      - { name: openssl }
      # - { name: openssl, state: linked, install_options: force }  # can't make link with brew's openssl
      - { name: icdiff }
      - { name: terminal-notifier }
      - { name: tree }
      - { name: tmux }
      - { name: peco }
      - { name: reattach-to-user-namespace }
      - { name: git }
      - { name: git-flow }
      - { name: hub }
      - { name: tig }
      - { name: shellcheck }
      - { name: readline }
      - { name: nginx }
      - { name: htop-osx }
      - { name: rsync }
      - { name: lsyncd }
      - { name: unison }
      - { name: ag }
      - { name: bison }
      - { name: ctags }
      - { name: figlet }
      - { name: jq }
      - { name: gdb }
      - { name: rmtrash }
      - { name: gnu-tar, install_options: default-names }
      - { name: mcrypt }
      - { name: re2c }
      - { name: jpeg }
      - { name: libxml2 }
      - { name: libxml2, state: linked, install_options: force }
      - { name: libxslt }
      - { name: libiconv }
      - { name: vim }
      - { name: neovim }
      # - { name: swiftlint }   # exit not 0 why?
      - { name: docker-machine-driver-xhyve }
      - { name: autoconf }
      - { name: automake }
    brew_priority_normal:
      - { name: ffmpeg }

    brew_cask_priority_normal:
      # browser, mailer, and apps for web services
      - { name: bathyscaphe }
      - { name: skype }
      - { name: slack-beta }

      # development
      - { name: atom }
      - { name: dash }
      - { name: diffmerge }
      - { name: docker }
      # - { name: eclipse-ide }
      # - { name: flash }   # Error on 10.12.1
      - { name: genymotion }
      # - { name: github-desktop }
      - { name: imageoptim }
      - { name: iterm2 }
      - { name: macvim-kaoriya }
      - { name: vimr }
      - { name: mi }
      - { name: pgadmin3 }
      - { name: rdm }
      - { name: robomongo }
      # - { name: rstudio }
      - { name: sequel-pro }
      - { name: sourcetree }
      - { name: swiftybeaver }
      - { name: vagrant }
      - { name: virtualbox }
      - { name: visual-studio-code }
      - { name: wireshark }

      # utility
      - { name: alfred }
      - { name: anki }
      - { name: appcleaner }
      - { name: bettertouchtool }
      - { name: caffeine }
      - { name: cooviewer }
      - { name: day-o }
      - { name: diskmaker-x }
      - { name: diskwave }
      # - { name: dupscanub }
      - { name: dropbox }
      - { name: flux }
      - { name: google-japanese-ime }
      - { name: hosts }
      # - { name: karabiner }
      - { name: kindle }
      - { name: path-finder }
      # - { name: seil }
      - { name: totalspaces }
      - { name: libreoffice }
      - { name: onyx }
      - { name: vlc }
      # - { name: teamviewer }
      # - { name: xtrafinder }
      - { name: zoomus }

      # for home machine
      - { name: lastfm }
      - { name: xld }
      # - { name: soundflower }
      # - { name: pd-extended }

      # shareware
      - { name: parallels-desktop }
      - { name: jetbrains-toolbox }

      # QuickLook
      - { name: betterzipql }
      - { name: emin-webpquicklook }
      - { name: epubquicklook }
      # replace this.
      # https://github.com/BrianGilbert/QLColorCode-extra
      #- { name: qlcolorcode }
      #- { name: qldds }    # sha256 error
      - { name: qlimagesize }
      - { name: qlmarkdown }
      - { name: qlnetcdf }
      - { name: qlprettypatch }
      - { name: qlrest }
      - { name: qlstephen }
      - { name: qlvideo }
      - { name: quicklook-csv }
      - { name: quicklook-json }
      - { name: quicknfo }
      - { name: scriptql }
      - { name: webpquicklook }
    anyenv_plugins:
      - { name: znz/anyenv-update.git, path: anyenv-update }
      - { name: aereal/anyenv-exec.git, path: anyenv-exec }
    rbenv_plugins:
      - { name: sstephenson/rbenv-default-gems.git, path: rbenv-default-gems }
      - { name: sstephenson/rbenv-gem-rehash.git, path: rbenv-gem-rehash }
      - { name: rkh/rbenv-update.git, path: rbenv-update }
    composer_modules:
      - squizlabs/php_codesniffer=*
      - phpmd/phpmd=*
    vagrant_plugins:
      - sahara
      - dotenv
      - vagrant-vbguest
      - vagrant-vbox-snapshot
  tasks:
    # Mac setting
    - name: preview text copy
      osx_defaults: domain=com.apple.finder key=QLEnableTextSelection type=bool value=true

    - name: don't write DS_Store files on Network stores
      osx_defaults: domain=com.apple.desktopservices key=DSDontWriteNetworkStores type=bool value=true

    # homebrew -------------------------------------------------
    - name: tap repositries
      homebrew_tap: tap={{ item }} state=present
      with_items: '{{brew_taps}}'

    - name: update & upgrade homebrew
      homebrew: update_homebrew=yes upgrade_all=yes

    - name: install brew cask priority-high packages
      homebrew_cask: name={{ item.name }} state={{ item.state|default('present') }}
      with_items: '{{brew_cask_priority_high}}'
      environment:
        HOMEBREW_CASK_OPTS: '{{homebrew_cask_opts}}'

    - name: install brew priority-high packages
      homebrew: name={{ item.name }} state={{ item.state|default('latest') }} install_options={{ item.install_options|default() }}
      with_items: '{{brew_priority_high}}'

    - name: install brew priority-normal packages
      homebrew: name={{ item.name }} state={{ item.state|default('latest') }} install_options={{ item.install_options|default() }}
      with_items: '{{brew_priority_normal}}'

    - name: install brew cask priority-normal packages
      homebrew_cask: name={{ item.name }} state={{ item.state|default('present') }}
      with_items: '{{brew_cask_priority_normal}}'
      environment:
        HOMEBREW_CASK_OPTS: '{{homebrew_cask_opts}}'

    # sym links -------------------------------------------------
    - name: install links & some plugins
      shell: "{{ home_dir }}/dotfiles/_setup.zsh"

    # Docker
    - name: chown & chmod docker-machine-driver-xhyve
      file: path=/usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve owner=root group=wheel mode="u+s"
      become: yes

    # - name: install /usr/include links
    #   shell: ln -sf $(xcrun --show-sdk-path)/usr/include/ /usr/include
    #   become: yes

    # applications setting link
    # - name: install app setting links
    #   file: src={{ home_dir }}dotfiles/{{ item.src }} dest={{ home_dir }}{{ item.dest }} state=link force=yes
    #   with_items: '{{app_setting_links}}'

    # anyenv
    - name: install anyenv
      git: repo=https://github.com/riywo/anyenv dest={{ home_dir }}.anyenv/

    - name: install anyenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/plugins/{{ item.path }}
      with_items: '{{anyenv_plugins}}'

    # Ruby
    - name: install rbenv
      shell: /bin/bash -lc "anyenv install -s rbenv"

    - name: install rbenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/rbenv/plugins/{{ item.path }}
      with_items: '{{rbenv_plugins}}'

    - name: mod default gem list
      file: src={{ home_dir }}dotfiles/default_libraries/default-gems dest={{ home_dir }}.anyenv/envs/rbenv/default-gems state=link force=yes

    - name: install ruby with rbenv
      shell: /bin/bash -lc "rbenv install {{ ruby_version }}"

    - name: set ruby version global
      shell: /bin/bash -lc "rbenv global {{ ruby_version }}"

    - name: install bitclust
      shell: /bin/bash -lc "rbenv rehash && bitclust setup"

    # Node.js
    - name: install ndenv
      shell: /bin/bash -lc "anyenv install -s ndenv"

    - name: install ndenv-plugins
      git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/ndenv/plugins/{{ item.path }}
      with_items:
        - { name: 'kaave/ndenv-default-npms.git', path: 'ndenv-default-npms' }

    - name: mod default npm list
      file: src={{ home_dir }}dotfiles/default_libraries/default-npms dest={{ home_dir }}.anyenv/envs/ndenv/default-npms state=link force=yes

    - name: install node.js with ndenv
      shell: /bin/bash -lc "ndenv install {{ nodejs_version }}"

    - name: set node version global
      shell: /bin/bash -lc "ndenv global {{ nodejs_version }}"

    - name: ndenv rehash
      shell: /bin/bash -lc "ndenv rehash"

    # # Python
    # # use homebrew packages
    # - name: install pyenv
    #   shell: /bin/bash -lc "anyenv install -s pyenv"
    #
    # - name: install pyenv-plugins
    #   git: repo=https://github.com/{{ item.name }} dest={{ home_dir }}.anyenv/envs/pyenv/plugins/{{ item.path }}
    #   with_items:
    #     - { name: 'yyuu/pyenv-virtualenv.git', path: 'pyenv-virtualenv' }
    #
    # # 2.7.x install
    # - name: install python {{ python2_version }} with pyenv
    #   shell: /bin/bash -lc "pyenv install {{ python2_version }}"
    #
    # # 3.x.x install
    # - name: install python {{ python3_version }} with pyenv
    #   shell: /bin/bash -lc "pyenv install {{ python3_version }}"
    #
    # # global use python2_version
    # - name: set python version global
    #   shell: /bin/bash -lc "pyenv global {{ python2_version }}"
    #
    # - name: pyenv rehash
    #   shell: /bin/bash -lc "pyenv rehash"

    # go
    - name: install goenv
      shell: /bin/bash -lc "anyenv install -s goenv"

    - name: install golang with goenv
      shell: /bin/bash -lc "goenv install {{ go_version }}"

    - name: set golang version global
      shell: /bin/bash -lc "goenv global {{ go_version }}"

    - name: goenv rehash
      shell: /bin/bash -lc "goenv rehash"

    # Erlang
    - name: install erlenv
      shell: /bin/bash -lc "anyenv install -s erlenv"

    - name: download Erlang source
      get_url: url=http://www.erlang.org/download/otp_src_{{ erlang_version }}.tar.gz dest=/tmp/{{ erlang_version }}.tar.gz

    - name: extract Erlang source
      # unarchiveでやると文字コードの都合かエラーになるのでshell
      shell: cd /tmp/ && tar xfvz {{ erlang_version }}.tar.gz && rm -rf {{ erlang_version }}.tar.gz

    - name: install Erlang
      shell: cd /tmp/otp_src_{{ erlang_version }} && export ERL_TOP=`pwd` && ./configure --with-ssl=$(brew --prefix openssl) --prefix={{ home_dir }}.anyenv/envs/erlenv/releases/{{ erlang_version }} && make && make install

    - name: set Erlang version global
      shell: /bin/bash -lc "erlenv global {{ erlang_version }}"

    # Elixir
    - name: install exenv
      shell: /bin/bash -lc "anyenv install -s exenv"

    - name: install Elixir with Homebrew
      homebrew: name=elixir state='latest'

    - name: install Elixir with exenv
      shell: /bin/bash -lc "exenv install {{ elixir_version }}"

    - name: set Elixir version global
      shell: /bin/bash -lc "exenv global {{ elixir_version }}"

    # PHP
    - name: install phpenv
      shell: /bin/bash -lc "anyenv install -s phpenv"

    - name: fix default install option
      lineinfile: dest={{ home_dir }}.anyenv/envs/phpenv/plugins/php-build/share/php-build/default_configure_options regexp=^--with-mysql=.* line=

    - name: install PHP with phpenv
      shell: /bin/bash -lc "PHP_BUILD_CONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl) --with-libxml-dir=$(brew --prefix libxml2)\" phpenv install {{ php_version }}"

    - name: set php version global
      shell: /bin/bash -lc "phpenv global {{ php_version }}"

    - name: rehash PHP
      shell: /bin/bash -lc "phpenv rehash"

    - name: install global composer modules
      shell: /bin/bash -lc 'composer global require "{{ item }}"'
      with_items: '{{composer_modules}}'

    # Vagrant
    - name: install vagrant plugins
      command: vagrant plugin install {{ item }}
      with_items: '{{vagrant_plugins}}'

    # nginx
    # - name: set nginx plist
    #   shell: cp /usr/local/opt/nginx/*.plist /Library/LaunchDaemons
    #   become: yes
    #
    # - name: set nginx plist
    #   shell: launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist
    #   become: yes

